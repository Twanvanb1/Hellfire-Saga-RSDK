// ----------------------------------
// RSDK Project: Sonic 2
// Script Description: Monitor Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================

private alias object.value0  : object.contentsPos.y
private alias object.value1  : object.timer
private alias object.value3  : object.rewardPlayer
private alias object.value31 : object.altContents

// Monitor type aliases
private alias 0  : MONITOR_BLANK
private alias 1  : MONITOR_EGGMAN
private alias 2  : MONITOR_RINGS
private alias 3  : MONITOR_SHIELD_FIRE
private alias 4  : MONITOR_SHIELD_LIGHTNING
private alias 5  : MONITOR_SHIELD_BUBBLE
private alias 6  : MONITOR_SHIELD_BLUE
private alias 7  : MONITOR_SWORD
private alias 8  : MONITOR_EMPTY
private alias 9 : MONITOR_RANDOM

private alias 9 : MONITOR_COUNT

// Monitor states
private alias 0 : MONITOR_STATE_IDLE
private alias 1 : MONITOR_STATE_FALL

// Broken monitor states
private alias 0 : MONITOR_STATE_RISE

// Player Aliases
private alias object.state : player.state
private alias object.controlMode : player.controlMode
private alias object.propertyValue : player.character
private alias object.yvel : player.yvel
private alias object.gravity : player.gravity
private alias object.animation : player.animation
private alias object.value16 : player.isSidekick
private alias object.value17 : debugMode.currentSelection
private alias object.value25 : player.gravityStrength
private alias object.value40 : player.hitboxLeft
private alias object.value38 : player.hitboxTop
private alias object.value41 : player.hitboxRight
private alias object.value39 : player.hitboxBottom

// Game Modes
private alias 2 : MODE_TIMEATTACK

// Shield Types Aliases
private alias 0 : SHIELDTYPE_S2
private alias 1 : SHIELDTYPE_S3
private alias 2 : SHIELDTYPE_RAND_S2
private alias 3 : SHIELDTYPE_RAND_S3

// Item Mode Aliases
private alias 0 : ITEMMODE_NOPREFERENCE
private alias 1 : ITEMMODE_RANDOM
private alias 2 : ITEMMODE_TELEPORTONLY
private alias 3 : ITEMMODE_FIXED

// Path ID Aliases
private alias 0 : PATH_A


// ========================
// Function Declarations
// ========================

reserve function Monitor_DebugDraw
reserve function Monitor_DebugSpawn


// ========================
// Static Values
// ========================

private value Monitor_startDebugID = 0


// ========================
// Tables
// ========================

// This variant uses S2 shields only
private table Monitor_randTypesTable_S2
	1  // MONITOR_RINGS
	2  // MONITOR_SHIELD_BLUE
	3  // MONITOR_INVINCIBILITY
	4  // MONITOR_SPEEDSHOES
	5  // MONITOR_1UP_SONIC
	6  // MONITOR_EGGMAN
	13 // MONITOR_TELEPORT
	1  // MONITOR_RINGS
	2  // MONITOR_SHIELD_BLUE
	1  // MONITOR_RINGS
end table

// This table uses S3 shields as well!
private table Monitor_randTypesTable_S3
	1  // MONITOR_RINGS
	2  // MONITOR_SHIELD_BLUE
	3  // MONITOR_INVINCIBILITY
	4  // MONITOR_SPEEDSHOES
	5  // MONITOR_1UP_SONIC
	9  // MONITOR_SHIELD_BUBBLE
	10 // MONITOR_SHIELD_FIRE
	11 // MONITOR_SHIELD_LIGHTNING
	6  // MONITOR_EGGMAN
	13 // MONITOR_TELEPORT
end table


// ========================
// Function Definitions
// ========================

private function Monitor_DebugDraw
	DrawSprite(0)
	
	temp0 = debugMode[0].currentSelection
	temp0 -= Monitor_startDebugID
	temp0 += 2
	DrawSprite(temp0)
end function


private function Monitor_DebugSpawn
	temp0 = debugMode[0].currentSelection
	temp0 -= Monitor_startDebugID
	CreateTempObject(TypeName[Monitor], temp0, object.xpos, object.ypos)
	object[tempObjectPos].frame = object[tempObjectPos].propertyValue
	object[tempObjectPos].frame += 2
end function


// ========================
// Events
// ========================

event ObjectUpdate
	if object.state == MONITOR_STATE_FALL
		object.yvel += 0x3800
		object.ypos += object.yvel
		if object.yvel >= 0
			ObjectTileCollision(CSIDE_FLOOR, 0, 16, PATH_A)
			if checkResult == true
				object.yvel = 0
				object.state = MONITOR_STATE_IDLE
			end if
		end if
	end if

	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
		CheckGreater(player[currentPlayer].yvel, -1)
		temp0 = checkResult
		CheckEqual(player[currentPlayer].gravity, GRAVITY_GROUND)
		temp0 |= checkResult
		if temp0 == true
			CheckEqual(player[currentPlayer].animation, ANI_JUMPING)
			temp0 = checkResult
			CheckEqual(player[currentPlayer].animation, ANI_GLIDING)
			temp0 |= checkResult
			CheckEqual(player[currentPlayer].animation, ANI_GLIDING_STOP)
			temp0 |= checkResult
			if temp0 == true
				if player[currentPlayer].isSidekick == false
					BoxCollisionTest(C_TOUCH, object.entityPos, -16, -14, 16, 16, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)
					if checkResult == true
						object.state = MONITOR_STATE_RISE
						CreateTempObject(TypeName[Smoke Puff], 0, object.xpos, object.ypos)
						object[tempObjectPos].drawOrder = 4
						player[currentPlayer].yvel += player[currentPlayer].gravityStrength
						player[currentPlayer].yvel += player[currentPlayer].gravityStrength
						FlipSign(player[currentPlayer].yvel)

						object.type = TypeName[Broken Monitor]
						object.rewardPlayer = currentPlayer
						if object.priority != PRIORITY_XBOUNDS_DESTROY
							object.priority = PRIORITY_ACTIVE
						end if

						object.alpha = 0xFF
						object.contentsPos.y = object.ypos
						object.timer = -0x30000
						if object.propertyValue == MONITOR_RANDOM
							vs.randomValue *= 1103515245
							vs.randomValue += 12345
							vs.randomValue &= 0x7FFFFFFF
							temp0 = vs.randomValue
							temp0 >>= 16
							temp0 %= 10

						end if

						PlaySfx(SfxName[Destroy], false)
					end if
				else
					BoxCollisionTest(C_SOLID, object.entityPos, -15, -14, 15, 16, currentPlayer, C_BOX, C_BOX, C_BOX, C_BOX)
				end if
			else
				BoxCollisionTest(C_SOLID, object.entityPos, -15, -14, 15, 16, currentPlayer, C_BOX, C_BOX, C_BOX, C_BOX)
			end if
		else
			BoxCollisionTest(C_SOLID, object.entityPos, -15, -16, 15, 16, currentPlayer, C_BOX, C_BOX, C_BOX, C_BOX)
			if checkResult == COL_BOTTOM
				object.state = MONITOR_STATE_FALL
				object.yvel = -0x20000
				player[currentPlayer].yvel = 0x20000
			end if
		end if
	next
end event


event ObjectDraw
	DrawSpriteFX(0, FX_FLIP, object.xpos, object.ypos)
	DrawSpriteFX(object.frame, FX_FLIP, object.xpos, object.ypos)
	
	switch StageSetup_monitorOverlayFrame
	case 0
	case 1
		break

	case 6
	case 7
		DrawSpriteFX(1, FX_FLIP, object.xpos, object.ypos)
		break

	case 12
	case 13
		DrawSpriteFX(2, FX_FLIP, object.xpos, object.ypos)
		break

	default
		
		break
	end switch
end event


event ObjectStartup
	LoadSpriteSheet("Global/Items.gif")
	SpriteFrame(-16, -16, 32, 32, 18, 1) // 0 - Base monitor sprite
	SpriteFrame(-8, -13, 16, 16, 18, 50) // 1 - Static 1
	SpriteFrame(-8, -13, 16, 16, 35, 50) // 2 - Static 2
	SpriteFrame(-8, -12, 16, 14, 18, 66) // 3 - MONITOR_EGGMAN
	SpriteFrame(-8, -12, 16, 14, 35, 66) // 4 - MONITOR_RINGS
	SpriteFrame(-8, -12, 16, 14, 18, 81) // 5 - MONITOR_SHIELD_FIRE
	SpriteFrame(-8, -12, 16, 14, 35, 81) // 6 - MONITOR_SHIELD_LIGHTNING
	SpriteFrame(-8, -12, 16, 14, 18, 96)  // 7 - MONITOR_SHIELD_BUBBLE
	SpriteFrame(-8, -12, 16, 14, 35, 96)  // 8 - MONITOR_SHIELD_BLUE
	SpriteFrame(-8, -12, 16, 14, 18, 111) // 9 - MONITOR_SWORD
	SpriteFrame(-8, -12, 16, 14, 35, 111) // 10 - MONITOR_EMPTY
	SpriteFrame(-8, -14, 16, 16, 35, 50) // 11 -MONITOR_RANDOM 
	
	// (The Mania monitor in the Origins version's spritesheet is unused btw)
	
	Monitor_startDebugID = DebugMode_ObjCount
	Monitor_startDebugID--
	temp0 = MONITOR_BLANK
	while temp0 < MONITOR_COUNT
		temp2 = true
		if temp2 == true
			SetTableValue(TypeName[Monitor], DebugMode_ObjCount, DebugMode_TypesTable)
			SetTableValue(Monitor_DebugDraw, DebugMode_ObjCount, DebugMode_DrawTable)
			SetTableValue(Monitor_DebugSpawn, DebugMode_ObjCount, DebugMode_SpawnTable)
			DebugMode_ObjCount++
		end if
		temp0++
	loop
	
	foreach (TypeName[Monitor], arrayPos0, ALL_ENTITIES)
		object[arrayPos0].altContents = object[arrayPos0].propertyValue
		object[arrayPos0].altContents >>= 4
		object[arrayPos0].propertyValue &= 15
	next

	foreach (TypeName[Monitor], arrayPos0, ALL_ENTITIES)
		object[arrayPos0].frame = object[arrayPos0].propertyValue
		object[arrayPos0].frame += 2
	next
end event


// ========================
// Editor Events
// ========================

event RSDKEdit
	if editor.returnVariable == true
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			checkResult = object.propertyValue
			break
			
		case 0 // contents
			checkResult = object.propertyValue
			checkResult &= 0xF
			break
			
		end switch
	else
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			object.propertyValue = editor.variableValue
			break
			
		case 0 // contents
			temp0 = editor.variableValue
			temp0 &= 0xF
			object.propertyValue &= 0xF0
			object.propertyValue |= temp0
			break
			
		end switch
	end if
end event


event RSDKDraw
	object.frame = object.propertyValue
	object.frame &= 0xF

	DrawSpriteFX(0, FX_FLIP, object.xpos, object.ypos)
	DrawSpriteFX(object.frame, FX_FLIP, object.xpos, object.ypos)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Items.gif")
	SpriteFrame(-16, -16, 32, 32, 18, 1) // 0 -	MONITOR_BLANK
	SpriteFrame(-8, -12, 16, 14, 18, 66) // 1 - MONITOR_EGGMAN
	SpriteFrame(-8, -12, 16, 14, 35, 66) // 2 - MONITOR_RINGS
	SpriteFrame(-8, -12, 16, 14, 18, 81) // 3 - MONITOR_SHIELD_FIRE
	SpriteFrame(-8, -12, 16, 14, 35, 81) // 4 - MONITOR_SHIELD_LIGHTNING
	SpriteFrame(-8, -12, 16, 14, 18, 96)  // 5 - MONITOR_SHIELD_BUBBLE
	SpriteFrame(-8, -12, 16, 14, 35, 96)  // 6 - MONITOR_SHIELD_BLUE
	SpriteFrame(-8, -12, 16, 14, 18, 111) // 7 - MONITOR_SWORD
	SpriteFrame(-8, -12, 16, 14, 35, 111) // 8 - MONITOR_EMPTY
	SpriteFrame(-8, -13, 16, 16, 35, 50) // 9 -MONITOR_RANDOM 

	

	AddEditorVariable("contents")
	SetActiveVariable("contents")
	AddEnumVariable("None", MONITOR_BLANK)
	AddEnumVariable("Eggman", MONITOR_EGGMAN)
	AddEnumVariable("Rings", MONITOR_RINGS)
	AddEnumVariable("Fire Shield", MONITOR_SHIELD_FIRE)
	AddEnumVariable("Lightning Shield", MONITOR_SHIELD_LIGHTNING)
	AddEnumVariable("Bubble Shield", MONITOR_SHIELD_BUBBLE)
	AddEnumVariable("Blue Shield", MONITOR_SHIELD_BLUE)
	AddEnumVariable("Sword", MONITOR_SWORD)
	AddEnumVariable("Empty", MONITOR_EMPTY)
	AddEnumVariable("Random", MONITOR_RANDOM)
end event
