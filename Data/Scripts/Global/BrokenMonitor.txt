// ----------------------------------
// RSDK Project: Sonic 2
// Script Description: Broken Monitor Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================

private alias object.value0 : object.contentsPos.y
private alias object.value1 : object.timer
private alias object.value3 : object.rewardPlayer
private alias object.value4 : object.drawIndex

// Monitor type aliases
private alias 0  : MONITOR_BLANK
private alias 1  : MONITOR_EGGMAN
private alias 2  : MONITOR_RINGS
private alias 3  : MONITOR_SHIELD_FIRE
private alias 4  : MONITOR_SHIELD_LIGHTNING
private alias 5  : MONITOR_SHIELD_BUBBLE
private alias 6  : MONITOR_SHIELD_BLUE
private alias 7  : MONITOR_SWORD
private alias 8  : MONITOR_EMPTY
private alias 9 : MONITOR_RANDOM

// Monitor states
private alias 0 : MONITOR_STATE_RISE
private alias 1 : MONITOR_STATE_FADE
private alias 2 : MONITOR_STATE_IDLE

// VSGame States
private alias 1 : VSGAME_TELEPORT

// Player aliases
private alias object.type    : player.type
private alias object.xpos    : player.xpos
private alias object.ypos    : player.ypos
private alias object.speed   : player.speed
private alias object.value0  : player.rings
private alias object.value3  : player.drownTimer
private alias object.value4  : player.drownLevel
private alias object.value6  : player.speedShoesTimer
private alias object.value7  : player.invincibleTimer
private alias object.value16 : player.isSidekick
private alias object.value37 : player.shield

// Shields
private alias 0 : SHIELD_NONE
private alias 1 : SHIELD_NORMAL
private alias 2 : SHIELD_BUBBLE
private alias 3 : SHIELD_FIRE
private alias 4 : SHIELD_LIGHTNING

// Super States
private alias 1 : SUPERSTATE_SUPER

// Shield Type Aliases
private alias 3 : SHIELDTYPE_RAND_S3

// Game Modes
private alias 2 : MODE_TIMEATTACK

// Music Events
private alias 25 : SLOT_MUSICEVENT_CHANGE

private alias 2 : MUSICEVENT_TRANSITION

// Tracks
private alias 2 : TRACK_INVINCIBLE

// Global Variable ID Aliases
private alias 25 : GLOBAL_PLAYERLIVES


// ========================
// Function Declarations
// ========================

reserve function BrokenMonitor_Blank


// ========================
// Static Values
// ========================

public value BrokenMonitor_ResetDrownMusic = 0


// ========================
// Function Definitions
// ========================

private function BrokenMonitor_Blank
	// Do nothing!
end function


// ========================
// Events
// ========================

event ObjectUpdate
	switch object.state
	case MONITOR_STATE_RISE
		if object.timer < 0
			object.contentsPos.y += object.timer
			object.timer += 0x1800
		else
			object.timer = 0
		end if

		if object.timer == 0
			object.state = MONITOR_STATE_FADE
			object.inkEffect = INK_ALPHA
			currentPlayer = object.rewardPlayer
			switch object.propertyValue
			case MONITOR_BLANK
				break

			case MONITOR_EGGMAN
				CallFunction(Player_Hit)
				break

			case MONITOR_RINGS
				player[currentPlayer].rings += 10
				if ringPan == 0
					PlaySfx(SfxName[Ring L], false)
					SetSfxAttributes(SfxName[Ring L], -1, -100)
					ringPan = 1
				else
					PlaySfx(SfxName[Ring R], false)
					SetSfxAttributes(SfxName[Ring R], -1, 100)
					ringPan = 0
				end if

				if player[currentPlayer].rings > 999
					player[currentPlayer].rings = 999
				end if
				
				if player[0].rings >= ringExtraLife
					if options.gameMode != MODE_TIMEATTACK
						// this one doesn't have 2P global array code, it's just like this
						player.lives++
						PlaySfx(SfxName[Life], false)
						PauseMusic()
						ResetObjectEntity(SLOT_MUSICEVENT_CHANGE, TypeName[Music Event], MUSICEVENT_TRANSITION, 0, 0)
						object[SLOT_MUSICEVENT_CHANGE].priority = PRIORITY_ACTIVE
					end if

					ringExtraLife += 100
					if ringExtraLife > 300
						ringExtraLife = 1000
					end if
				end if
				break

			case MONITOR_SHIELD_FIRE
				PlaySfx(SfxName[Fire Shield], false)
				arrayPos0 = playerCount
				arrayPos0 += currentPlayer
				player[currentPlayer].shield = SHIELD_FIRE

				if Player_superState != SUPERSTATE_SUPER
					if object[arrayPos0].type != invincibilityType
						CallFunction(Player_ApplyShield)
					end if
				end if
				break

			case MONITOR_SHIELD_LIGHTNING
				PlaySfx(SfxName[Lightning Shield], false)
				arrayPos0 = playerCount
				arrayPos0 += currentPlayer
				player[currentPlayer].shield = SHIELD_LIGHTNING

				if Player_superState != SUPERSTATE_SUPER
					if object[arrayPos0].type != invincibilityType
						CallFunction(Player_ApplyShield)
					end if
				end if
				break

			case MONITOR_SHIELD_BUBBLE
				PlaySfx(SfxName[Bubble Shield], false)
				arrayPos0 = playerCount
				arrayPos0 += currentPlayer
				player[currentPlayer].shield = SHIELD_BUBBLE

				if Player_superState != SUPERSTATE_SUPER
					if object[arrayPos0].type != invincibilityType
						CallFunction(Player_ApplyShield)
					end if
				end if

				if player[currentPlayer].drownLevel >= 3
					player[currentPlayer].drownTimer = 0
					player[currentPlayer].drownLevel = 0
					CallFunction(BrokenMonitor_ResetDrownMusic)
				end if
				break

			case MONITOR_SHIELD_BLUE
				PlaySfx(SfxName[Blue Shield], false)
				arrayPos0 = playerCount
				arrayPos0 += currentPlayer
				player[currentPlayer].shield = SHIELD_NORMAL

				if Player_superState != SUPERSTATE_SUPER
					if object[arrayPos0].type != invincibilityType
						CallFunction(Player_ApplyShield)
					end if
				end if
				break

			case MONITOR_SWORD
				break

			case MONITOR_EMPTY
				break

			case MONITOR_RANDOM
				break
			end switch
		end if
		break

	case MONITOR_STATE_FADE
		object.timer++
		if object.timer == 30
			object.timer = 0
			object.state = MONITOR_STATE_IDLE
			object.propertyValue = MONITOR_BLANK
			if object.priority != PRIORITY_XBOUNDS_DESTROY
				object.priority = PRIORITY_BOUNDS
			end if
		else
			if object.timer > 14
				object.alpha -= 16
			end if
		end if
		break

	case MONITOR_STATE_IDLE
		break
	end switch
end event


event ObjectDraw
	if object.drawIndex == 0
		// Draw the monitor box on the normal layer
		DrawSprite(0)
		AddDrawListEntityRef(5, object.entityPos)
	else
		// Draw the effect icon on the higher draw layer
		if object.propertyValue > 0
			DrawSpriteFX(object.propertyValue, FX_INK, object.xpos, object.contentsPos.y)
		end if
	end if
	
	object.drawIndex ^= 1
end event


event ObjectStartup
	LoadSpriteSheet("Global/Items.gif")
	SpriteFrame(-16, 0, 32, 16, 18, 34) // 0 - Broken Monitor Frame
	
	SpriteFrame(-8, -9, 16, 14, 18, 66) // 1 - MONITOR_RINGS
	SpriteFrame(-8, -9, 16, 14, 35, 66) // 2 - MONITOR_SHIELD_BLUE
	SpriteFrame(-8, -9, 16, 14, 18, 81) // 3 - MONITOR_INVINCIBILITY
	SpriteFrame(-8, -9, 16, 14, 35, 81) // 4 - MONITOR_SPEEDSHOES
	// Player lives icons
	SpriteFrame(-8, -9, 16, 14, 18, 96)  // 5 - MONITOR_1UP_SONIC
	SpriteFrame(-8, -9, 16, 14, 35, 96)  // 6 - MONITOR_1UP_TAILS
	SpriteFrame(-8, -9, 16, 14, 18, 111) // 7 - MONITOR_1UP_KNUX
	
	SpriteFrame(-8, -9, 16, 14, 35, 111) // 8 - MONITOR_SUPER
	SpriteFrame(-8, -9, 16, 14, 18, 141) // 9 - MONITOR_SHIELD_BUBBLE
	SpriteFrame(-8, -9, 16, 14, 35, 126) // 10 - MONITOR_SHIELD_FIRE
	SpriteFrame(-8, -9, 16, 14, 18, 126) // 11 - MONITOR_SHIELD_LIGHTNING
	SpriteFrame(-8, -9, 16, 14, 35, 141) // 12 - MONITOR_EGGMAN
	SpriteFrame(-8, -9, 16, 14, 18, 156) // 13 - MONITOR_TELEPORT
	SpriteFrame(-8, -9, 16, 14, 35, 156) // 14 - MONITOR_RANDOM
	SpriteFrame(-8, -9, 16, 14, 18, 171) // 15 - MONITOR_DEBUG_SHIELD
	SpriteFrame(-8, -9, 16, 14, 35, 171) // 16 - MONITOR_DEBUG_EMERALDS
#platform: USE_ORIGINS
	if game.coinMode == false
		SpriteFrame(-8, -9, 16, 14, 18, 201) // 17 - MONITOR_1UP_AMY
	else
		SpriteFrame(-8, -9, 16, 14, 35, 186) // 17 - MONITOR_1UP_AMY (The long awaited return of Coin)
	end if
#endplatform
	
	// (The Spring Icon is unused, and so is the Mania monitor added in Origins)
	
	// By default, assume there isn't any water in the stage and assign a dummy function for resetting drown music
	// (In stages with water, that stage's [Water] object will set the function itself instead)
	BrokenMonitor_ResetDrownMusic = BrokenMonitor_Blank
end event


// ========================
// Editor Events
// ========================

event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Items.gif")
	SpriteFrame(-16, 0, 32, 16, 18, 34)
	
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event
